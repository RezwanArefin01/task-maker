version: 2

SETUP_UBUNTU: &SETUP_UBUNTU
    name: Setup system
    command: |
      apt update
      apt install -y openjdk-8-jdk curl python python3 python3-wheel xz-utils
      echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | tee /etc/apt/sources.list.d/bazel.list
      curl https://bazel.build/bazel-release.pub.gpg | apt-key add -
      apt update
      apt install -y bazel
      cat > .bazelrc <<EOF
        # This is from Bazel's former travis setup, to avoid blowing up the RAM usage.
        startup --host_jvm_args=-Xmx2500m
        startup --host_jvm_args=-Xms2500m
        startup --batch
        # This is so we understand failures better
        build --verbose_failures
        # This is so we don't use sandboxed execution. Sandboxed execution
        # runs stuff in a container, and since GitLabCI already runs its script
        # in a container this fails to run tests.
        build --spawn_strategy=standalone --genrule_strategy=standalone
        test --test_strategy=standalone --test_output=streamed --nocache_test_results
        build --show_progress_rate_limit 3
        build --local_resources=4000,2,1.0
      EOF

jobs:
  build:
    docker:
      - image: base/archlinux
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cat > /etc/pacman.d/mirrorlist <<EOF
            Server = https://archlinux.surlyjake.com/archlinux/\$repo/os/\$arch
            Server = http://mirrors.evowise.com/archlinux/\$repo/os/\$arch
            Server = http://mirror.rackspace.com/archlinux/\$repo/os/\$arch
            EOF
            pacman -Syu --noconfirm jdk8-openjdk bazel gcc make python-virtualenv python-wheel
      - run:
          name: Configure bazel
          command: |
            cat > .bazelrc <<EOF
              # This is from Bazel's former travis setup, to avoid blowing up the RAM usage.
              startup --host_jvm_args=-Xmx2500m
              startup --host_jvm_args=-Xms2500m
              startup --batch
              # This is so we understand failures better
              build --verbose_failures
              # This is so we don't use sandboxed execution. Sandboxed execution
              # runs stuff in a container, and since GitLabCI already runs its script
              # in a container this fails to run tests.
              build --spawn_strategy=standalone --genrule_strategy=standalone
              test --test_strategy=standalone --test_output=streamed --nocache_test_results
              build --show_progress_rate_limit 3
              build --local_resources=4000,2,1.0
            EOF
      - restore_cache:
          keys:
            - task-maker-v2-{{ arch }}-
      - run:
          name: Build
          command: bazel build ...
      - run:
          name: Test
          command: bazel test ...
      - save_cache:
          paths: ~/.cache
          key: task-maker-v2-{{ arch }}-{{ .Revision }}
          when: always

  release-ubuntu-14.04:
    docker:
      - image: ubuntu:14.04.5
    steps:
      - checkout
      - run:
          name: Setup system
          command: |
            apt-get update
            apt-get -y install software-properties-common curl build-essential python-wheel python-dev python-setuptools zip
            add-apt-repository -y ppa:webupd8team/java
            add-apt-repository -y ppa:ubuntu-toolchain-r/test
            apt-get update
            echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections
            echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections
            apt-get -y install oracle-java8-installer oracle-java8-set-default
            echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" > /etc/apt/sources.list.d/bazel.list
            curl https://bazel.build/bazel-release.pub.gpg | apt-key add -
            apt-get update
            apt-get -y install bazel g++-4.9
            cat > .bazelrc <<EOF
              # This is from Bazel's former travis setup, to avoid blowing up the RAM usage.
              startup --host_jvm_args=-Xmx2500m
              startup --host_jvm_args=-Xms2500m
              startup --batch
              # This is so we understand failures better
              build --verbose_failures
              # This is so we don't use sandboxed execution. Sandboxed execution
              # runs stuff in a container, and since GitLabCI already runs its script
              # in a container this fails to run tests.
              build --spawn_strategy=standalone --genrule_strategy=standalone
              test --test_strategy=standalone --test_output=streamed --nocache_test_results
              build --show_progress_rate_limit 3
              build --local_resources=4000,2,1.0
            EOF
      - run:
          name: Build release
          environment:
            - CC: gcc-4.9
            - CXX: g++-4.9
          command: .circleci/release.sh
      - store_artifacts:
          path: ./release
          destination: ubuntu-14.04

  release-ubuntu-16.04:
    docker:
      - image: ubuntu:16.04
    steps:
      - checkout
      - run:
          <<: *SETUP_UBUNTU
      - run:
          name: Build release
          command: bazel build //release:release-deb -c opt --python_path=python3
      - store_artifacts:
          path: ./bazel-bin/release
          destination: ubuntu-16.04

  release-ubuntu-17.10:
    docker:
      - image: ubuntu:17.10
    steps:
      - checkout
      - run:
          <<: *SETUP_UBUNTU
      - run:
          name: Build release
          command: bazel build //release:release-deb -c opt --python_path=python3
      - store_artifacts:
          path: ./bazel-bin/release
          destination: ubuntu-17.10

  release-ubuntu-18.04:
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run:
          <<: *SETUP_UBUNTU
      - run:
          name: Build release
          command: bazel build //release:release-deb -c opt --python_path=python3
      - store_artifacts:
          path: ./bazel-bin/release
          destination: ubuntu-18.04

  release-archlinux:
      docker:
        - image: base/archlinux
      steps:
        - checkout
        - run:
            name: Setup system
            command: |
              pacman -Syu --noconfirm jdk8-openjdk bazel gcc make python-virtualenv python-wheel
              cat > .bazelrc <<EOF
                # This is from Bazel's former travis setup, to avoid blowing up the RAM usage.
                startup --host_jvm_args=-Xmx2500m
                startup --host_jvm_args=-Xms2500m
                startup --batch
                # This is so we understand failures better
                build --verbose_failures
                # This is so we don't use sandboxed execution. Sandboxed execution
                # runs stuff in a container, and since GitLabCI already runs its script
                # in a container this fails to run tests.
                build --spawn_strategy=standalone --genrule_strategy=standalone
                test --test_strategy=standalone --test_output=streamed --nocache_test_results
                build --show_progress_rate_limit 3
                build --local_resources=4000,2,1.0
              EOF
        - run:
            name: Build release
            command: .circleci/release.sh
        - store_artifacts:
            path: ./release
            destination: archlinux

workflows:
  version: 2
  build:
    jobs:
      - build:
          # without this filter the tag builds wont start
          filters:
            tags:
              only: /.*/
      - release-ubuntu-14.04:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - release-ubuntu-16.04:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - release-ubuntu-17.10:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      # disabled because at the moment python3 it's bugged in ubuntu 18.04
#      - release-ubuntu-18.04:
#          requires:
#            - build
#          filters:
#            branches:
#              ignore: /.*/
#            tags:
#              only: /^v.*/
      - release-archlinux:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
